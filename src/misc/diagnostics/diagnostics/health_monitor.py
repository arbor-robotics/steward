import rclpy
from rclpy.node import Node, ParameterDescriptor, ParameterType
from rclpy.qos import QoSProfile, ReliabilityPolicy, HistoryPolicy, DurabilityPolicy

from nav_msgs.msg import OccupancyGrid
from std_msgs.msg import Header

from os import path
import cv2
import numpy as np
from matplotlib import pyplot as plt
from copy import deepcopy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image


class HealthMonitor(Node):
    """
    This node loads and publishes three maps:
    - Satellite imagery
    - Height
    - Planting bounds (generated by the user)
    """

    def __init__(self):
        super().__init__("map_loader")

        self.diagnostic_sub = self

    def declareParams(self) -> None:
        # Declare the map name as a ROS parameter
        descr = ParameterDescriptor()
        descr.description = "The directory containing bounds.npy, imagery.jpg, heightmap.jpg, and info.yaml"
        descr.type = ParameterType.PARAMETER_STRING
        self.declare_parameter("map_dir", descriptor=descr)

        # Map resolution
        descr = ParameterDescriptor()
        descr.description = "Map resolution (m/pixel)"
        descr.type = ParameterType.PARAMETER_DOUBLE
        self.declare_parameter("resolution", descriptor=descr)

        # Map origin
        descr = ParameterDescriptor()
        descr.description = "Map origin [x,y,z]"
        descr.type = ParameterType.PARAMETER_DOUBLE_ARRAY
        self.declare_parameter("origin", descriptor=descr)

    def getHeader(self) -> Header:
        """Forms a message Header.

        Returns:
            Header: The stamped and framed Header.
        """
        header = Header()

        # Our map is in the... map frame. Yes, really!
        header.frame_id = "map"
        header.stamp = self.get_clock().now().to_msg()

        return header


def main(args=None):
    rclpy.init(args=args)

    node = HealthMonitor()

    rclpy.spin(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()

import rclpy
from rclpy.node import Node, ParameterDescriptor, ParameterType
from rclpy.qos import QoSProfile, ReliabilityPolicy, HistoryPolicy, DurabilityPolicy

from nav_msgs.msg import OccupancyGrid
from std_msgs.msg import Header

from os import path
import cv2
import numpy as np
from matplotlib import pyplot as plt
from copy import deepcopy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image


class MapLoader(Node):
    """
    This node loads and publishes three maps:
    - Satellite imagery
    - Height
    - Planting bounds (generated by the user)
    """

    def __init__(self):
        super().__init__("map_loader")

        self.heightmap_pub = self.create_publisher(OccupancyGrid, "/map/height", 10)
        self.bounds_pub = self.create_publisher(OccupancyGrid, "/map/bounds", 10)
        self.imagery_pub = self.create_publisher(Image, "/map/imagery", 10)

        self.bridge = CvBridge()

        self.declareParams()

        self.heightmap_msg, self.imagery_msg, self.bounds_msg = self.loadMapData()

        self.create_timer(5, self.publishMaps)

    def publishMaps(self) -> None:
        self.bounds_pub.publish(self.bounds_msg)
        self.heightmap_pub.publish(self.heightmap_msg)
        self.imagery_pub.publish(self.imagery_msg)
        self.get_logger().debug("Publishing maps!")

    def declareParams(self) -> None:
        # Declare the map name as a ROS parameter
        descr = ParameterDescriptor()
        descr.description = "The directory containing bounds.npy, imagery.jpg, heightmap.jpg, and info.yaml"
        descr.type = ParameterType.PARAMETER_STRING
        self.declare_parameter("map_dir", descriptor=descr)

        # Map resolution
        descr = ParameterDescriptor()
        descr.description = "Map resolution (m/pixel)"
        descr.type = ParameterType.PARAMETER_DOUBLE
        self.declare_parameter("resolution", descriptor=descr)

        # Map origin
        descr = ParameterDescriptor()
        descr.description = "Map origin [x,y,z]"
        descr.type = ParameterType.PARAMETER_DOUBLE_ARRAY
        self.declare_parameter("origin", descriptor=descr)

    def getHeader(self) -> Header:
        """Forms a message Header.

        Returns:
            Header: The stamped and framed Header.
        """
        header = Header()

        # Our map is in the... map frame. Yes, really!
        header.frame_id = "map"
        header.stamp = self.get_clock().now().to_msg()

        return header

    def loadHeightMap(self, dir: str) -> np.ndarray:
        heightmap = cv2.imread(path.join(dir, "heightmap.jpg"))

        # For some reason, the data shows up flipped along the vertical
        # axis in Rviz. Don't ask why! WSH.
        heightmap = cv2.flip(heightmap, 0)

        # Convert to grayscale from RGB, RGBA etc if necessary
        if heightmap.ndim > 2:
            heightmap = cv2.cvtColor(heightmap, cv2.COLOR_BGR2GRAY)

        # Convert from (0,255) to (0,100)
        heightmap = (heightmap.astype(float) * (100 / 255)).astype(int)

        return heightmap

    def loadImagery(self, dir: str) -> Image:
        imagery = cv2.imread(path.join(dir, "imagery.jpg"))

        image_msg = self.bridge.cv2_to_imgmsg(imagery, encoding="bgr8")
        header = Header()
        header.stamp = self.get_clock().now().to_msg()

        return image_msg

    def loadBounds(self, dir: str) -> np.ndarray:
        """Load bounds from a .npy file-- not a .jpg!
        We assume that the bounds have already been converted to a .npy file.
        Support may be added for other methods in the future.

        Args:
            dir (str): Directory where bounds.npy is stored

        Returns:
            np.ndarray: Bounds, as a numpy array
        """
        try:
            bounds = np.load(path.join(dir, "bounds.npy"))
            # For some reason, the data shows up flipped along the vertical
            # axis in Rviz. Don't ask why! WSH.
            bounds = np.flip(bounds, axis=0)
            return bounds
        except Exception as e:
            # If the bounds couldn't be loaded, return a blank 4 acre x 4 acre image
            self.get_logger().error(
                f"bounds.npy could not be loaded! Returning blank map. {e}"
            )
            return np.zeros((1272, 1272))

    def loadMapData(self) -> tuple[np.ndarray, Image, np.ndarray]:

        # Actually load the value of the ROS param
        map_dir = self.get_parameter("map_dir").value
        heightmap = self.loadHeightMap(map_dir)
        bounds = self.loadBounds(map_dir)
        imagery = self.loadImagery(map_dir)

        heightmap_grid_msg = OccupancyGrid()
        heightmap_grid_msg.header = self.getHeader()
        heightmap_grid_msg.info.height = heightmap.shape[0]
        heightmap_grid_msg.info.width = heightmap.shape[1]
        heightmap_grid_msg.info.resolution = self.get_parameter("resolution").value
        heightmap_grid_msg.info.map_load_time = self.get_clock().now().to_msg()

        origin = self.get_parameter("origin").value
        heightmap_grid_msg.info.origin.position.x = origin[0]
        heightmap_grid_msg.info.origin.position.y = origin[1]
        heightmap_grid_msg.info.origin.position.z = origin[2]

        bounds_grid_msg: OccupancyGrid = deepcopy(heightmap_grid_msg)

        heightmap_grid_msg.data = heightmap.flatten().tolist()
        bounds_grid_msg.data = bounds.flatten().tolist()

        # plt.imshow(heightmap)
        # plt.imshow(bounds)
        # plt.show()

        return heightmap_grid_msg, imagery, bounds_grid_msg


def main(args=None):
    rclpy.init(args=args)

    node = MapLoader()

    rclpy.spin(node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
